(declare-datatypes () ((B ($< ($<Ac25 E) ($<Ac26 Y)))
(E ($+ ($+Ac27 E) ($+Ac28 E)) $IInt1 $IVarx)
(Start ($while ($whileAc29 B) ($whileAc30 Start)) ($int=y ($int=yAc31 E)) ($int=x ($int=xAc32 E)))
(Y $IVary)))
(declare-var Y_term_0 Y)
(declare-var y_r2 Int)
(declare-var x_r0 Int)
(declare-var r__0 Bool)
(declare-var r__1 Int)
(declare-var y Int)
(declare-var Y_term_2 Y)
(declare-var Start_term_2 Start)
(declare-var Start_term_0 Start)
(declare-var E_term_0 E)
(declare-var B_term_1 B)
(declare-var r__2 Int)
(declare-var r__1 Bool)
(declare-var E_term_1 E)
(declare-var E_term_2 E)
(declare-var y_r0 Int)
(declare-var x_r2 Int)
(declare-var B_term_0 B)
(declare-var r__0 Int)
(declare-var x Int)
(declare-var @E__agtt.SynVar0 E)
(declare-var @E__agtt.SynVar1 E)
(declare-var @E__agtt.SynVar2 E)
(declare-var @B__agtt.SynVar0 B)
(declare-var @Start__agtt.SynVar0 Start)
(declare-var @Y__agtt.SynVar0 Y)
(declare-var @Y__agtt.SynVar2 Y)
(declare-var basicTest_AddByWhileLoop_01 Start)
(declare-var @B__agtt.SynVar1 B)
(declare-var @Start__agtt.SynVar2 Start)
(declare-rel B.Sem (B Bool Int Int))
(declare-rel Start.Sem (Start Int Int Int Int))
(declare-rel Y.Sem (Y Int Int Int))
(declare-rel E.Sem (E Int Int Int))
(declare-rel realizable ())
(declare-rel @B__agtt.Syn (B))
(declare-rel @Y__agtt.Syn (Y))
(declare-rel @E__agtt.Syn (E))
(declare-rel @Start__agtt.Syn (Start))
(rule (=> (and (= @B__agtt.SynVar0 ($< @E__agtt.SynVar1 @Y__agtt.SynVar2)) (@E__agtt.Syn @E__agtt.SynVar1) (@Y__agtt.Syn @Y__agtt.SynVar2)) (@B__agtt.Syn @B__agtt.SynVar0)))
(rule (=> (= @Y__agtt.SynVar0 $IVary) (@Y__agtt.Syn @Y__agtt.SynVar0)))
(rule (=> (= @E__agtt.SynVar0 $IInt1) (@E__agtt.Syn @E__agtt.SynVar0)))
(rule (=> (and (= @E__agtt.SynVar0 ($+ @E__agtt.SynVar1 @E__agtt.SynVar2)) (@E__agtt.Syn @E__agtt.SynVar1) (@E__agtt.Syn @E__agtt.SynVar2)) (@E__agtt.Syn @E__agtt.SynVar0)))
(rule (=> (= @E__agtt.SynVar0 $IVarx) (@E__agtt.Syn @E__agtt.SynVar0)))
(rule (=> (and (= @Start__agtt.SynVar0 ($while @B__agtt.SynVar1 @Start__agtt.SynVar2)) (@B__agtt.Syn @B__agtt.SynVar1) (@Start__agtt.Syn @Start__agtt.SynVar2)) (@Start__agtt.Syn @Start__agtt.SynVar0)))
(rule (=> (and (= @Start__agtt.SynVar0 ($int=y @E__agtt.SynVar1)) (@E__agtt.Syn @E__agtt.SynVar1)) (@Start__agtt.Syn @Start__agtt.SynVar0)))
(rule (=> (and (= @Start__agtt.SynVar0 ($int=x @E__agtt.SynVar1)) (@E__agtt.Syn @E__agtt.SynVar1)) (@Start__agtt.Syn @Start__agtt.SynVar0)))
(rule (=> (and (= B_term_0 ($< (as E_term_1 E) (as Y_term_2 Y))) (E.Sem (as E_term_1 E) (as r__1 Int) (as x Int) (as y Int)) (Y.Sem (as Y_term_2 Y) (as r__2 Int) (as x Int) (as y Int)) (= (as r__0 Bool) (< (as r__1 Int) (as r__2 Int)))) (B.Sem (as B_term_0 B) (as r__0 Bool) (as x Int) (as y Int))))
(rule (=> (and (= Start_term_0 ($while (as B_term_1 B) (as Start_term_2 Start))) (B.Sem (as B_term_1 B) (as r__1 Bool) (as x Int) (as y Int)) (Start.Sem (as Start_term_2 Start) (as x_r2 Int) (as y_r2 Int) (as x Int) (as y Int)) (Start.Sem (as Start_term_0 Start) (as x_r0 Int) (as y_r0 Int) (as x_r2 Int) (as y_r2 Int)) (as r__1 Bool)) (Start.Sem (as Start_term_0 Start) (as x_r0 Int) (as y_r0 Int) (as x Int) (as y Int))))
(rule (=> (and (= Y_term_0 $IVary)  (and (= (as r__0 Int) (as r__1 Int)) (= (as r__1 Int) (as y Int)))) (Y.Sem (as Y_term_0 Y) (as r__0 Int) (as x Int) (as y Int))))
(rule (=> (and (= E_term_0 ($+ (as E_term_1 E) (as E_term_2 E))) (E.Sem (as E_term_1 E) (as r__1 Int) (as x Int) (as y Int)) (E.Sem (as E_term_2 E) (as r__2 Int) (as x Int) (as y Int)) (= (as r__0 Int) (+ (as r__1 Int) (as r__2 Int)))) (E.Sem (as E_term_0 E) (as r__0 Int) (as x Int) (as y Int))))
(rule (=> (and (= Start_term_0 ($while (as B_term_1 B) (as Start_term_2 Start))) (B.Sem (as B_term_1 B) (as r__1 Bool) (as x Int) (as y Int)) (and (not (as r__1 Bool)) (and (= (as x Int) (as x_r0 Int)) (= (as y Int) (as y_r0 Int))))) (Start.Sem (as Start_term_0 Start) (as x_r0 Int) (as y_r0 Int) (as x Int) (as y Int))))
(rule (=> (and (= E_term_0 $IInt1)  (and (= (as r__0 Int) (as r__1 Int)) (= (as r__1 Int) 1))) (E.Sem (as E_term_0 E) (as r__0 Int) (as x Int) (as y Int))))
(rule (=> (and (= Start_term_0 ($int=y (as E_term_1 E))) (E.Sem (as E_term_1 E) (as r__1 Int) (as x Int) (as y Int)) (and (= (as x Int) (as x_r0 Int)) (= (as y Int) (as r__1 Int)))) (Start.Sem (as Start_term_0 Start) (as x_r0 Int) (as y_r0 Int) (as x Int) (as y Int))))
(rule (=> (and (= E_term_0 $IVarx)  (and (= (as r__0 Int) (as r__1 Int)) (= (as r__1 Int) (as x Int)))) (E.Sem (as E_term_0 E) (as r__0 Int) (as x Int) (as y Int))))
(rule (=> (and (= Start_term_0 ($int=x (as E_term_1 E))) (E.Sem (as E_term_1 E) (as r__1 Int) (as x Int) (as y Int)) (and (= (as x Int) (as r__1 Int)) (= (as y Int) (as y_r0 Int)))) (Start.Sem (as Start_term_0 Start) (as x_r0 Int) (as y_r0 Int) (as x Int) (as y Int))))
(rule (=> (and (= Start_term_1 ($int=x (as E_term_1 E))) (E.Sem (as E_term_1 E) (as r__1 Int) (as x Int) (as y Int)) (and (= (as x Int) (as r__1 Int)) (= (as y Int) (as y_r0 Int)))) (Start.Sem (as Start_term_1 Start) (as x_r0 Int) (as y_r0 Int) (as x Int) (as y Int))))
(rule (=> (and (Start.Sem basicTest_AddByWhileLoop_01 4 10 10 10) (Start.Sem basicTest_AddByWhileLoop_01 12 20 20 20)) realizable))
(query realizable)